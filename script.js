
// List of pattern sequences (modifiable)
const patternSequences = [

    [ 
    1.21, 1.69, 2.44, 3.33, 1.06, 1.18, 4.07, 17.81, 1.16, 2.09, 1.09, 
    41.89, 1.39, 1.35, 1.06, 12.85, 1.24, 1.73, 1.17, 1.21, 1.17, 
    1.38, 14.55, 1.37, 1.95, 1.82, 1.67, 5.39, 1.17, 1.24, 2.13, 
    26.86, 1.55, 3.11, 5.44, 1.43, 1.14, 1.21, 10.74, 2.59, 1.18, 
    7.40, 122.04, 4.41, 55.71, 3.99, 2.16, 4.35, 3.34, 1.22, 1.04, 
    1.51, 2.87, 1.30, 13.02, 1.89, 3.33, 1.00, 1.17, 1.11, 3.64, 
    2.14, 1.67, 1.34, 1.44, 1.51, 6.59, 1.23, 3.14, 1.69, 3.84, 
    1.15, 1.91, 1.04, 1.28, 1.31, 1.18, 1.00, 2.04, 1.56, 1.13, 
    1.00, 1.47, 1.90, 568.66, 1.42, 1.74, 1.54, 3.86, 1.10, 4.22, 
    10.33, 1.28, 1.78, 2.00, 9.25, 3.71, 1.05, 1.33, 4.47, 4.32, 
    2.88, 9.87, 7.60, 1.36, 1.56, 4.72, 2.75, 1.07, 2.32, 3.16, 
    4.09, 1.29, 1.18, 1.58, 2.54, 1.48, 1.03, 59.66, 6.35, 2.59, 
    4.50, 3.50, 1.00, 1.17, 1.26, 1.55, 1.16, 5.85, 1.21, 2.06, 
    1.90, 1.27, 4.78, 4.58, 2.97, 12.99, 1.42, 2.68, 18.50, 5.22, 
    4.84, 1.17, 1.85, 1.03, 1.70, 1.35, 1.65, 1.45, 1.89, 1.98, 
    1.05, 1.40, 1.60, 1.13, 4.03, 36.06, 1.56, 1.13, 1.58, 1.26, 
    1.22, 1.25, 1.21, 14.77, 1.02, 3.37, 1.90, 2.10, 1.25, 2.56, 
    1.21, 2.10, 1.26, 2.29, 1.22, 6.10 
],
[
    1.21, 1.08, 44.15, 1.22, 1.09, 3.85, 25.84, 2.70, 2.59, 10.91, 
    3.94, 2.66, 6.05, 2.65, 1.46, 11.12, 2.11, 1.13, 4.47, 3.24, 
    3.98, 1.11, 1.29, 1.19, 1.04, 1.15, 7.51, 1.22, 19.37, 1.30, 
    3.48, 4.75, 2.18, 1.09, 1.28, 1.29, 1.78, 1.02, 1.33, 9.03, 
    2.01, 4.11, 1.54, 8.00, 1.12, 3.97, 1.57, 3.28, 3.11, 7.20, 
    3.70, 3.17, 1.04, 1.24, 1.08, 2.13, 1.18, 1.15, 2.66, 1.12, 
    2.48, 3.62, 1.01, 1.74, 1.80, 1.07, 3.05, 1.68, 7.84, 2.32, 
    9.26, 27.14, 1.70, 2.11, 4.09, 1.14, 5.69, 1.00, 1.62, 2.08, 
    1.64, 2.05, 1.11, 5.72, 4.34, 9.57, 2.64, 1.61, 6.03, 1.42, 
    2.30, 1.02, 1.00, 1.37, 2.19, 2.03, 1.24, 1.59, 2.55, 3.41, 
    2.27, 4.00, 5.34, 15.57, 22.67, 1.02, 135.26, 1.26, 1.15, 
    2.56, 2.91, 1.82, 1.67, 1.00, 1.42, 3.14, 1.90, 8.56, 3.72, 
    2.62, 1.51, 2.40, 11.95, 2.31, 4.60, 2.90, 1.29, 1.07, 1.00, 
    64.78, 10.02, 1.55, 1.05, 10.30, 1.61, 1.00, 2.94, 1.22, 
    92.95, 2.86, 1.25, 2.46, 1.50, 1.58, 1.18, 4.23, 1.87, 1.55, 
    2.64, 1.95, 1.09, 1.28
],
[
    1.20, 2.35, 3.43, 1.00, 2.80, 2.60, 2.81, 1.35, 257.71, 1.14, 
    1.14, 4.82, 3.09, 2.28, 2.90, 5.26, 5.86, 1.92, 1.20, 1.04, 
    1.80, 1.08, 1.32, 1.91, 2.22, 4.16, 2.63, 1.16, 2.69, 25.40, 
    1.30, 1.04, 1.12, 3.97, 8.13, 1.07, 1.17, 3.98, 2.20, 1.73, 
    2.67, 1.58, 1.82, 1.08, 10.60, 4.64, 1.65, 1.45, 35.73, 1.81, 
    2.56, 12.92, 3.73, 6.07, 1.70, 1.01, 1.43, 1.27, 1.14
],
[
    6.80, 1.15, 2.11, 18.51, 2.17, 4.11, 1.57, 6.16, 1.00, 1.85, 
    3.03, 1.06, 3.27, 23.51, 26.13, 1.48, 18.00, 1.00, 5.09, 1.38, 
    2.34, 7.97, 8.87, 1.63, 26.23, 1.35, 5.70, 1.10, 2.12, 1.00, 
    22.00, 3.21, 29.77, 1.00, 1.83, 3.56, 4.68, 1.03, 2.92, 2.96, 
    1.07, 2.27, 1.98, 2.51, 1.16, 3.60, 3.94, 11.52, 1.09, 2.84, 
    2.26, 3.51, 45.31, 1.69, 1.03, 3.87, 4.08, 2.32, 1.38, 3.10
],
[
    1.21, 1.69, 2.44, 3.33, 1.06, 1.18, 4.07, 17.81, 1.16, 2.09, 
    1.09, 41.89, 1.39, 1.35, 1.06, 12.85, 1.24, 1.73, 1.17, 1.21, 
    1.17, 1.38, 14.55, 1.37, 1.95, 1.82, 1.67, 5.39, 1.17, 1.24, 
    2.13, 26.86, 1.55, 3.11, 5.44, 1.43, 1.14, 1.21, 10.74, 2.59, 
    1.18, 122.04, 4.41, 55.71, 3.99, 2.16, 4.35, 3.34, 1.22, 1.04, 
    1.51, 2.87, 1.30, 13.02, 1.89, 3.33, 1.00, 1.17, 1.11, 3.64, 
    2.14, 1.67, 1.34, 1.44, 1.51, 6.59, 1.23, 3.14, 1.69, 3.84, 
    1.15, 1.91, 1.04, 1.28, 1.31, 1.18, 1.00, 2.04, 1.56, 1.13, 
    1.00, 1.47, 1.90, 568.66, 1.42, 1.74, 1.54, 3.86, 1.10, 4.22, 
    10.33, 1.28, 1.78, 2.00, 9.25, 3.71, 1.05, 1.33, 4.47, 4.32, 
    2.88, 9.87, 7.60, 1.36, 1.56, 4.72, 2.75, 1.07, 2.32, 3.16, 
    4.09, 1.29, 1.18, 1.58, 2.54, 1.48, 1.03, 59.66, 6.35, 2.59, 
    4.50, 3.50, 1.00, 1.17, 1.26, 1.55, 1.16, 5.85, 1.21, 2.06, 
    1.90, 1.27, 4.78, 4.58, 2.97, 12.99, 1.42, 2.68, 18.50, 5.22, 
    4.84, 1.17, 1.85, 1.03, 1.70, 1.35, 1.65, 1.45, 1.89, 1.98, 
    1.05, 1.40, 1.60, 1.13, 4.03, 36.06, 1.56, 1.13, 1.58, 1.26, 
    1.22, 1.25, 14.77, 1.02, 3.37, 1.90, 2.10, 1.25, 2.56, 1.21, 
    2.10, 1.26, 2.29, 1.22, 6.10
],
[
    2.22, 1.11, 1.06, 8.85, 6.27, 2.73, 3.79, 1.32, 2.69, 1.59, 
    1.60, 1.78, 7.31, 1.33, 1.00, 1.11, 7.37, 2.13, 1.18, 7.03, 
    1.07, 7.87, 5.51, 94.44, 1.99, 2.79, 1.13, 1.73, 3.07, 6.02, 
    3.58, 1.04, 2.00, 1.70, 2.39, 5.45, 5.38, 1.13, 1.44, 1.82, 
    1.00, 2.15, 2.76, 36.77, 1.00, 5.96, 1.90, 3.95, 20.42, 1.76, 
    2.41, 1.34, 1.36, 1.18, 5.48, 2.36, 1.46, 2.24, 1.60, 1.00, 
    4.12, 1.86, 2.04, 4.35, 1.02, 1.62, 1.75, 1.75, 1.42, 6.61
],

[
    1.09, 1.30, 1.35, 5.98, 2.05, 5.90, 1.57, 2.43, 2.74, 2.91, 
    2.07, 1.26, 3.02, 1.31, 1.87, 2.17, 1.04, 3.46, 1.31, 1.05, 
    12.51, 9.36, 4.81, 1.40, 2.62, 1.13, 1.06, 1.11, 7.60, 3.61, 
    1.10, 1.17, 4.35, 1.37, 2.84, 3.07, 2.06, 5.45, 1.41, 1.34, 
    2.98, 1.00, 1.05, 1.87, 1.32, 5.86, 1.48, 1.12, 3.42, 1.49, 
    102.10, 1.00, 2.08, 1.51, 1.96, 4.26, 5.32, 1.56, 7.01, 1.08, 
    1.28, 4.70, 5.19, 2.72, 45.49, 1.31, 2.96, 1.32, 1.41, 7.72, 
    2.41, 1.21, 1.17, 1.60, 83.10, 1.33, 1.00, 2.17, 1.00, 1.92, 
    1.68, 1.34, 3.46, 1.00, 3.13, 3.34, 1.33, 1.45, 6.14, 23.54, 
    1.43, 4.55, 1.00, 1.25, 2.07, 2.96, 1.10, 1.07, 1.43, 1.46, 
    4.72, 1.00, 1.19, 6.27, 8.74, 3.25
],
[
    75.28, 2.63, 1.06, 3.82, 5.74, 1.00, 1.50, 2.03, 1.01, 2.61, 
    1.20, 1.57, 1.07, 1.04, 1.06, 1.91, 4.46, 86.06, 1.49, 2.64, 
    1.14, 2.11, 1.78, 2.78, 1.00, 1.27, 1.08, 1.10, 2.24, 12.88, 
    1.86, 1.11, 15.34, 1.08, 1.57, 1.16, 1.00, 1.03, 371.18, 1.24, 
    3.06, 1.06, 6.46, 1.38, 1.05, 1.61, 1.43, 2.56, 1.39, 5.19, 
    19.63, 1.36, 4.85, 1.52, 1.67, 1.81, 1.27, 1.14, 2.13, 10.93
],
[
    1.07, 1.49, 5.65, 1.51, 25.64, 10.03, 1.71, 1.38, 5.99, 1.24, 
    1.79, 3.38, 1.75, 7.05, 3.80, 1.46, 4.96, 1.04, 4.58, 1.66, 
    1.19, 2.97, 1.44, 1.87, 1.06, 1.69, 8.61, 1.28, 1.87, 5.46, 
    1.16, 1.31, 4.30, 1.45, 1.00, 1.12, 17.02, 1.40, 1.06, 1.32, 
    2.33, 1.22, 1.43, 4.90, 1.08, 1.00, 1.41, 1.72, 1.09, 3.54, 
    8.04, 1.83, 12.49, 1.09, 1.95, 1.00, 2.48, 1.21, 1.69, 3.11, 
    13.45, 1.12, 7.56, 1.20, 1.70, 2.76, 1.48, 2.79, 2.87, 7.29, 
    1.39, 1.82, 6.08, 5.79, 1.02, 1.75, 4.34, 1.11, 2.53, 1.34, 
    2.19, 3.73, 1.13, 2.06, 2.31, 5.78, 4.11, 3.80, 37.98, 442.01, 
    2.15, 1.03, 16.68, 2.61, 2.85, 9.10, 1.15, 1.14, 1.21, 1.32, 
    1.10, 1.38, 5.01, 1.55, 114.21, 4.00, 2.73, 4.73, 21.40, 1.03, 
    1.14, 1.61, 3.81, 1.64, 1.36, 5.67, 1.33, 6.42, 1.33, 1.05
],
[
    10.61, 4.02, 1.10, 1.81, 8.58, 1.56, 4.27, 22.13, 1.56, 1.05, 
    1.25, 13.54, 1.81, 515.80, 145.40, 2.45, 1.78, 1.03, 1.39, 6.45, 
    4.99, 2.36, 1.29, 1.03, 2.71, 4.70, 1.44, 3.03, 2.47, 1.95, 
    22.92, 1.02, 9.92, 6.79, 2.99, 1.14, 1.29, 7.96, 2.29, 2.86, 
    12.27, 1.34, 1.65, 4.16, 1.66, 1.20, 5.51, 6.92, 1.95, 1.60, 
    1.04, 8.38, 3.88, 2.89, 1.31, 2.72, 5.92, 1.40, 2.98, 6.90, 
    1.22, 1.15, 2.72, 2.29, 2.09, 1.13, 4.34, 4.55, 1.30, 1.30, 
    58.43, 2.03, 4.80, 1.12, 1.85, 16.50, 5.27, 5.39, 1.07, 5.65, 
    5.41, 1.84, 7.48, 1.45, 1.53, 1.88, 1.45, 1.54, 1.15, 1.11, 
    1.80, 1.95, 5.94, 1.38, 1.45, 1.28, 2.44, 5.26, 1.06, 1.34, 
    1.03, 9.78, 2.33, 4.21, 1.15, 1.37, 1.81, 3.15, 1.05, 1.43, 
    13.40, 1.91, 13.40, 1.91, 10.00, 1.96, 1.80, 1.33, 1.08, 10.90, 
    1.02, 1.09, 1.79, 4.14, 1.00, 1.12, 2.59, 1.24, 1.31, 3.89, 
    1.60, 1.53
]

        
];

// Function to predict next multipliers based on the best matching pattern sequence
function predictNextByPattern(latestValues, patternSequences) {
    let bestMatchIndex = 0;
    let smallestDiff = Infinity;

    // Find the pattern sequence with the closest match to the input values
    for (let i = 0; i < patternSequences.length; i++) {
        const pattern = patternSequences[i];
        const commonLength = Math.min(latestValues.length, pattern.length);
        const diff = pattern.slice(0, commonLength)
            .reduce((sum, value, index) => sum + Math.pow(value - latestValues[index], 2), 0) / commonLength;

        if (diff < smallestDiff) {
            smallestDiff = diff;
            bestMatchIndex = i;
        }
    }

    const bestPattern = patternSequences[bestMatchIndex];
    
    // Predict the next rounds using the best-matching pattern
    let nextRounds = bestPattern.slice(latestValues.length); // Remaining part of best pattern after matching values
    
    // If the pattern doesn't cover 10 rounds, fill the rest with random values
    while (nextRounds.length < 10) {
        nextRounds.push(Math.round((Math.random() * (25 - 1) + 1) * 100) / 100);  // Random multiplier between 1 and 25
    }
    
    return nextRounds.slice(0, 10);
}

//

// Main logic to handle predictions
document.getElementById('predict-btn').addEventListener('click', function() {
    const userInput = document.getElementById('latest-multipliers').value;
    const latestValues = userInput.split(/[, ]+/).map(Number).filter(Boolean);
    
    if (latestValues.length === 0) {
        alert("Please enter valid multipliers.");
        return;
    }

    // Generate predictions
    const nextByPattern = predictNextByPattern(latestValues, patternSequences); // Pattern matching
    // Averaging pattern sequences

    // Output the results
    document.getElementById('pattern-output').innerHTML = `
        <strong>Next 10 rounds by pattern match:</strong><br>
        > ${nextByPattern.map(x => `${x}x`).join(", ")}
    `;

    
});
